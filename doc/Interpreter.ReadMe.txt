Interpreter ReadMe
/*
Author : Yupeng Zhang @ USTC
Email  : ypzhange@mail.ustc.edu.cn
*/
==================================================================================
Usage:

CommandLine~
Interpreter tager.o [-d] [-d2]
	[-d]	use this selection will enable interpreter to output the load/sto instruction 's result for debug. 
	[-d2]	Careful! This selection will enable interpreter to ouput EVERY instruction to your terminal for debug.
	* please only choose one selection
Example:
bin/Interpreter test/c0test.o -d2
==================================================================================
.o File Format:
	Size			  WhatData		Comment
				FileStart
(4Byte)				DataSegmentSize		(Count in Word(4 Byte))
(4Byte*StaticDataSize)		DataSegment
(4Byte)				CodeSegmentSize		(Count in Instructions)
(12Byte*CodeSegmentSize)	CodeSegment
				EOF
==================================================================================
AddressLocate:

Segment(i.l)	Offset(i.a)	FinalAddress
0		offset		offset
1		offset		s[++t]=base+offset
2		offset		s[++t]=staticsegment+offset
For detial , look this function:
long Locate(long base, long segment,long offset);
==================================================================================
Instructions:

Factor(i.f)	Voerload(i.l)	Address(i.a)	Function
lit		0,1,2		offset		s[++t]=Locate(base,i.l,i.a)
----------------------------------------------------------------------------------
opr		0(int),1(float)	OP_NEG(-)	s[t]=-s[t]
----------------------------------------------------------------------------------
		0(int,int)	OP_+-*/<><=>=	t--
		1(int,float)	(OP_Agrithm &)	s[t]=s[t] op s[t+1]
		2(float,int)	(OP_Compare)
		3(float,float)		
----------------------------------------------------------------------------------
		0(int only)	OP_Logic & Bit	t-- ; s[t]=s[t] op s[t+1]
----------------------------------------------------------------------------------
		0(float->int)	OP_CAST		s[t]=cast(s[t])
		1(int->float)
----------------------------------------------------------------------------------
		2(char)		OP_READ		Cin>>s[++t]
		3(int)
		5(float)
----------------------------------------------------------------------------------
		1(bool)		OP_WRITE	Cout<<s[t--]
		2(char)				
		3(int)				
		4(string)			Special : Cout<<s[s[t--]]
		5(float)			
----------------------------------------------------------------------------------
lod		0,1,2		offset		s[++t]=s[Locate(base,i.l,i.a)]
----------------------------------------------------------------------------------
sto		0,1,2		offset		s[Locate(base,i.l,i.a)]=s[t]
----------------------------------------------------------------------------------
lar		0,1,2		offset		s[t]=s[s[t]+Locate(base,i.l,i.a)]
for most time , use (lar,0,0) , means s[t]=s[s[t]]
----------------------------------------------------------------------------------
sar		0,1,2		offset		s[s[t]+Locate(base,i.l,i.a)]=s[t-1]
						t--
for most time , use (sar,0,0) , means s[s[t]]=s[t-1] ; t --
----------------------------------------------------------------------------------
cal		0		offset		s[++t]=b; s[++t]=p;
						b=--t; p=i.a;
----------------------------------------------------------------------------------
isp		0		offset		t+=i.a
----------------------------------------------------------------------------------
jmp		0		position	p=i.a;
----------------------------------------------------------------------------------
jpc		0(t--)		position	if (s[t--]==0) jmp position
		1		position	if (s[t]==0) jmp position
----------------------------------------------------------------------------------
jpe		0(t--)		position	if (s[t--]!=0) jmp position
		1		position	if (s[t]!=0) jmp position
==================================================================================
